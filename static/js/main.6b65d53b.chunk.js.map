{"version":3,"sources":["pages/gameBoard/components/Square.tsx","constants/index.ts","utils/handleCheckWord.ts","utils/calculateWinner.ts","utils/handleHandOutTiles.ts","pages/gameBoard/Board.tsx","utils/readDictionary.ts","utils/generateTilesArray.ts","App.tsx","index.tsx"],"names":["Square","props","className","onClick","value","PLAYER_A","PLAYER_B","PLAYER_A_TURN","PLAYER_B_TURN","getHorizontallyLetters","squares","i","horizontallyWordArray","horizontallyIndexLeftWay","horizontallyIndexRightWay","push","isEmpty","unshift","getVerticallyLetters","verticallyWordArray","verticallyIndexUpWay","verticallyIndexDownWay","checkWhetherValidWord","dictionary","horizontallyWord","toString","replaceAll","verticallyWord","isHorizontallyAWord","filter","word","isVerticallyAWord","length","calculateWinner","scoreA","scoreB","handOutTilesToPlayer","tilesBag","rack","slice","newTilesBag","Board","handleClick","a","state","dictionaryWord","currentPlayerAScore","playerAInfo","score","currentPlayerBScore","playerBInfo","rackA","rackB","winner","currentPlayer","shift","setState","notificationMessage","tilesAndNewBag","Array","fill","name","Object","keys","result","ranNum","Math","ceil","random","String","fromCharCode","generateTilesArray","this","map","square","renderBoard","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b65d53b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props: {\n\tonClick: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined; value: React.ReactNode;\n}): JSX.Element {\n\treturn (\n\t\t<button\n\t\t\tclassName=\"square\"\n\t\t\tonClick={props.onClick}\n\t\t>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\n\nexport default Square;","export const PLAYER_A = 'PLAYER_A';\nexport const PLAYER_B = 'PLAYER_B';\nexport const PLAYER_A_IS_WINNER= 'Player A Is Winner';\nexport const PLAYER_B_IS_WINNER= 'Player B Is Winner';\nexport const NO_WINNER= 'No Winner';\nexport const PLAYER_A_TURN= 'Now is Player A Turn';\nexport const PLAYER_B_TURN= 'Now is Player B Turn';","import { isEmpty } from 'lodash';\n\n// collecting a letter array form Horizontally way for helping judge whether player has established a valid word.\nexport const getHorizontallyLetters = (squares: Array<string>, i: number) => {\n    let horizontallyWordArray: Array<string> = [];\n    let horizontallyIndexLeftWay: number = i;\n    let horizontallyIndexRightWay: number = i;\n\n    horizontallyWordArray.push(squares[i]);\n    while(horizontallyIndexLeftWay > i - (i % 15)) {\n        horizontallyIndexLeftWay--;\n        if(isEmpty(squares[horizontallyIndexLeftWay])) {\n            break;\n        };\n        horizontallyWordArray.unshift(squares[horizontallyIndexLeftWay]);\n    };\n    while(horizontallyIndexRightWay < i + 14 - (i % 15)) {\n        horizontallyIndexRightWay++;\n        if(isEmpty(squares[horizontallyIndexRightWay])) {\n            break;\n        };\n        horizontallyWordArray.push(squares[horizontallyIndexRightWay]);\n    };\n    return horizontallyWordArray;\n};\n// collecting a letter array form vertically way for helping judge whether player has established a valid word.\nexport const getVerticallyLetters = (squares: Array<string>, i: number) => {\n    let verticallyWordArray: Array<string> = [];\n    let verticallyIndexUpWay: number = i;\n    let verticallyIndexDownWay: number = i;\n\n    verticallyWordArray.push(squares[i]);\n    while(verticallyIndexUpWay >= 0) {\n        verticallyIndexUpWay -= 15;\n        if(isEmpty(squares[verticallyIndexUpWay])) {\n            break;\n        };\n        verticallyWordArray.unshift(squares[verticallyIndexUpWay]);\n    };\n    while(verticallyIndexDownWay <= 224) {\n        verticallyIndexDownWay += 15;\n        if(isEmpty(squares[verticallyIndexDownWay])) {\n            break;\n        };\n        verticallyWordArray.push(squares[verticallyIndexDownWay]);\n    };\n    return verticallyWordArray;\n};\n\n// To judge whether player has established a valid word by using array filter method to filter Dictionary.\n// User will get score of the word length if this word is a valid word.\nexport const checkWhetherValidWord = (horizontallyWordArray: Array<string>, verticallyWordArray: Array<string>, dictionary: Array<string>) => {\n    const horizontallyWord: string = horizontallyWordArray.toString().replaceAll(',', '');\n    const verticallyWord: string = verticallyWordArray.toString().replaceAll(',', '');\n    const isHorizontallyAWord: boolean = !isEmpty(dictionary.filter(word => word === horizontallyWord));\n    const isVerticallyAWord: boolean = !isEmpty(dictionary.filter(word => word === verticallyWord));\n\n\n    if(isHorizontallyAWord && isVerticallyAWord) {\n        if(verticallyWord.length ===1 && horizontallyWord.length ===1) {\n            return 1;\n        };\n        return horizontallyWord.length + verticallyWord.length;\n    }else {\n        if(isHorizontallyAWord) {\n            return horizontallyWord.length;\n        };\n        if(isVerticallyAWord) {\n            return verticallyWord.length;\n        };\n    };\n    return 0;\n};","import { PLAYER_A_IS_WINNER, PLAYER_B_IS_WINNER, NO_WINNER } from '../constants'\n\nexport const calculateWinner = (scoreA: number, scoreB: number) => {\n    if(scoreA > scoreB) {\n        return PLAYER_A_IS_WINNER;\n    };\n    if(scoreA < scoreB) {\n        return PLAYER_B_IS_WINNER;\n    };\n    if(scoreA === scoreB) {\n        return NO_WINNER;\n    };\n    return null;\n};","export const handOutTilesToPlayer = (tilesBag: Array<string>) => {\n    return {\n        rack: tilesBag.slice(0, 7),\n        newTilesBag: tilesBag.slice(7)\n    };\n};","import React, { Component, Fragment } from 'react';\nimport Square from './components/Square';\nimport { IBoardStoreState, IHandleHandOutTiles } from '../../interfaces';\nimport { isEmpty } from 'lodash';\nimport { PLAYER_A, PLAYER_B, PLAYER_A_TURN, PLAYER_B_TURN } from '../../constants'\nimport { generateTilesArray } from '../../utils/generateTilesArray';\nimport { getHorizontallyLetters, getVerticallyLetters, checkWhetherValidWord } from '../../utils/handleCheckWord';\nimport { readDictionary } from '../../utils/readDictionary';\nimport { calculateWinner } from '../../utils/calculateWinner';\nimport { handOutTilesToPlayer } from '../../utils/handleHandOutTiles';\nclass Board extends Component<any, IBoardStoreState> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsquares: Array(225).fill(null),\n\t\t\ttilesBag: [],\n\t\t\tdictionaryWord: [],\n\t\t\tcurrentPlayer: PLAYER_A,\n\t\t\tnotificationMessage: PLAYER_A_TURN,\n\t\t\tplayerAInfo: {\n\t\t\t\tname: PLAYER_A,\n\t\t\t\tscore: 0,\n\t\t\t\track: []\n\t\t\t},\n\t\t\tplayerBInfo: {\n\t\t\t\tname: PLAYER_B,\n\t\t\t\tscore: 0,\n\t\t\t\track: []\n\t\t\t}\n\t\t};\n\t};\n\n\tcomponentDidMount() {\n\t\tconst dictionaryWord: Array<string> = readDictionary();\n\t\tconst tilesBag: Array<string> = generateTilesArray();\n\t\tconst tilesAndNewBag: IHandleHandOutTiles = handOutTilesToPlayer(tilesBag);\n\t\tthis.setState({\n\t\t\tdictionaryWord,\n\t\t\ttilesBag: tilesAndNewBag.newTilesBag,\n\t\t\tplayerAInfo: { ...this.state.playerAInfo, rack: tilesAndNewBag.rack }\n\t\t});\n\t};\n\n\n\thandleClick = async (i: number) => {\n\t\tconst squares: Array<string> = this.state.squares;\n\t\tconst dictionaryWord: Array<string> = this.state.dictionaryWord;\n\t\tconst tilesBag: Array<string> = this.state.tilesBag;\n\t\tconst currentPlayerAScore: number = this.state.playerAInfo.score;\n\t\tconst currentPlayerBScore: number = this.state.playerBInfo.score;\n\t\tconst rackA: Array<string> = this.state.playerAInfo.rack;\n\t\tconst rackB: Array<string> = this.state.playerBInfo.rack;\n\t\tlet winner: string | null = null;\n\t\tlet score: number;\n\t\tlet horizontallyWordArray: Array<string> = [];\n\t\tlet verticallyWordArray: Array<string> = [];\n\t\tlet tilesAndNewBag: IHandleHandOutTiles;\n\n\t\tif(isEmpty(tilesBag) && isEmpty(rackA) && isEmpty(rackB)) {\n\t\t\twinner = calculateWinner(currentPlayerAScore, currentPlayerBScore);\n\t\t};\n\n\t\tif(!isEmpty(winner) || !isEmpty(squares[i])) return;\n\n\t\tif(this.state.currentPlayer === PLAYER_A) {\n\t\t\tif(!isEmpty(rackA)) {\n\t\t\t\tsquares[i] = rackA[0];\n\t\t\t\trackA.shift();\n\t\t\t\thorizontallyWordArray = getHorizontallyLetters(squares, i);\n\t\t\t\tverticallyWordArray = getVerticallyLetters(squares, i);\n\t\t\t\tscore = checkWhetherValidWord(horizontallyWordArray, verticallyWordArray, dictionaryWord);\n\t\t\t\tawait this.setState({\n\t\t\t\t\tsquares,\n\t\t\t\t\tnotificationMessage: PLAYER_A_TURN,\n\t\t\t\t\tplayerAInfo: { ...this.state.playerAInfo, rack: rackA, score: currentPlayerAScore + score }\n\t\t\t\t});\n\t\t\t\tif(isEmpty(rackA)) {\n\t\t\t\t\ttilesAndNewBag = handOutTilesToPlayer(tilesBag);\n\t\t\t\t\tawait this.setState({\n\t\t\t\t\t\tcurrentPlayer: PLAYER_B,\n\t\t\t\t\t\ttilesBag: tilesAndNewBag.newTilesBag,\n\t\t\t\t\t\tnotificationMessage: PLAYER_B_TURN,\n\t\t\t\t\t\tplayerBInfo: { ...this.state.playerBInfo, rack: tilesAndNewBag.rack }\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\n\t\tif(this.state.currentPlayer ===  PLAYER_B) {\n\t\t\tif(!isEmpty(rackB)) {\n\t\t\t\tsquares[i] = rackB[0];\n\t\t\t\trackB.shift();\n\t\t\t\thorizontallyWordArray = getHorizontallyLetters(squares, i);\n\t\t\t\tverticallyWordArray = getVerticallyLetters(squares, i);\n\t\t\t\tscore = checkWhetherValidWord(horizontallyWordArray, verticallyWordArray, dictionaryWord);\n\t\t\t\tawait this.setState({\n\t\t\t\t\tsquares,\n\t\t\t\t\tnotificationMessage: PLAYER_B_TURN,\n\t\t\t\t\tplayerBInfo: { ...this.state.playerAInfo, rack: rackB, score: currentPlayerBScore + score }\n\t\t\t\t});\n\t\t\t\tif(isEmpty(rackB)) {\n\t\t\t\t\ttilesAndNewBag = handOutTilesToPlayer(tilesBag);\n\t\t\t\t\tawait this.setState({\n\t\t\t\t\t\tcurrentPlayer: PLAYER_A,\n\t\t\t\t\t\ttilesBag: tilesAndNewBag.newTilesBag,\n\t\t\t\t\t\tnotificationMessage: PLAYER_A_TURN,\n\t\t\t\t\t\tplayerAInfo: { ...this.state.playerAInfo, rack: tilesAndNewBag.rack }\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n\n\trenderBoard() {\n\t\tconst squares = [...this.state.squares];\n\t\treturn squares.map(\n\t\t\t(square, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Square\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tonClick={() => this.handleClick(i)}\n\t\t\t\t\t\tvalue={square}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t};\n\n\trender() {\n\t\tconst tilesBag: Array<string> = this.state.tilesBag;\n\t\tconst rackA: Array<string> = this.state.playerAInfo.rack;\n\t\tconst rackB: Array<string> = this.state.playerBInfo.rack;\n\t\tlet winner: string | null = null;\n\n\t\tif(isEmpty(tilesBag) && isEmpty(rackA) && isEmpty(rackB)) {\n\t\t\twinner = calculateWinner(this.state.playerAInfo.score, this.state.playerBInfo.score);\n\t\t};\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{!winner && (\n\t\t\t\t\t<div className=\"game-header-wrapper\">\n\t\t\t\t\t\t<div className=\"game-rules-container\">\n\t\t\t\t\t\t\t<div className=\"game-rules-title\">\n\t\t\t\t\t\t\t\t<p>Game info goes here</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tGame Rules:\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tTotal 100 tiles. Each player get 7 tiles from the bag.\n\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tThe player A starts first to form a word.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tThe player gets points equal to the number of letters in the word.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"game-info-container\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<span>Player A‘s next letter: </span>\n\t\t\t\t\t\t\t\t\t<span className=\"game-info-letter\">[{this.state.playerAInfo.rack[0]}]</span>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<span>Player B‘s next letter: </span>\n\t\t\t\t\t\t\t\t\t<span className=\"game-info-letter\">[{this.state.playerBInfo.rack[0]}]</span>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p>Player A‘s score: [{this.state.playerAInfo.score}]</p>\n\t\t\t\t\t\t\t\t<p>Player B‘s score: [{this.state.playerBInfo.score}]</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{!winner && (\n\t\t\t\t\t<div className=\"game-notification-container\">\n\t\t\t\t\t\t<p>{this.state.notificationMessage}</p>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{!winner && (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<div className=\"game-board-container\">\n\t\t\t\t\t\t\t{this.renderBoard()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t)}\n\t\t\t\t{winner && (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<div className=\"game-winner-title\">\n\t\t\t\t\t\t\t<p>{winner}</p>\n\t\t\t\t\t\t\t<p>Thanks For Playing The Crossword Puzzle Game</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import dictionary from './words_dictionary.json';\n//read dictionary json file from local catalog\nexport const readDictionary = () => {\n    // Because this dictionary contain over 380,000 object items,\n    // for enhance react performance, need to reduce useless data, only left key values are enough for this project.\n    const parsedDate: Array<string> = Object.keys(dictionary);\n    return parsedDate;\n};\n","export const generateTilesArray = (): Array<string> => {\n    let result: Array<string> = [];\n    // To generate 100 tiles (can change n for generating different num of tiles)\n    const tilesNum: number = 100;\n\tfor(let i: number = 0; i < tilesNum; i++){\n\t\t//random generate 0-25 num\n   \t\tlet ranNum: number = Math.ceil(Math.random() * 25);\n\t\t//lower case 'a' in ASCII is 97, a~z in ASCII table is 65 + 0~25;\n    \tresult.push(String.fromCharCode(97+ranNum));\n\t};\n\treturn result;\n};","import React from 'react';\nimport Board from './pages/gameBoard/Board';\nimport './App.scss';\n\nfunction App() {\n  return (\n\t<div className=\"game\">\n\t\t<div className=\"game-app-container\">\n\t\t\t<Board/>\n\t\t</div>\n\t</div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}